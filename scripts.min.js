(async () => {
  // 🔧 Debug و Error logging
  const debug = m => console.log(`[DEBUG] Index: ${m}`);
  const error = m => console.error(`[ERROR] Index: ${m}`);
  
  // DOM Elements
  const loading = document.getElementById("loading");
  const errorMessage = document.getElementById("error-message");
  const mapContainer = document.getElementById("map-container");
  const tooltip = document.getElementById("tooltip");
  const skeleton = document.getElementById("skeleton");
  
  const containers = {
    "header-container": document.getElementById("header-container"),
    "icons-container": document.getElementById("icons-container"),
    "dock-container": document.getElementById("dock-container"),
    "sidebar-container": document.getElementById("sidebar-container"),
    "chat-icon-container": document.getElementById("chat-icon-container"),
    "control-center-container": document.getElementById("control-center-container"),
    "window-container": document.getElementById("window-container"),
    "map-container": mapContainer
  };

  // Validate DOM elements
  for (const [id, container] of Object.entries(containers)) {
    container ? debug(`${id} found`) : error(`${id} not found in DOM`);
  }

  // Mobile detection
  const isMobile = window.matchMedia("(max-width: 768px)").matches || 
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  debug(`Is mobile: ${isMobile}`);

  // Global state - FORCE LOGGED IN FOR SPA ROUTING
  window.APP_STATE = {
    isLoggedIn: true, // 🚀 Force true - no redirects!
    user: {
      id: 1,
      name: "AgrinHouse Admin",
      email: "admin@agrinhouse.com",
      role: "admin"
    },
    currentPath: window.location.pathname,
    isSPAMode: window.location.pathname !== '/' && window.location.pathname !== '/index.html'
  };

  debug(`🚀 SPA Mode: ${window.APP_STATE.isSPAMode}, Path: ${window.APP_STATE.currentPath}`);

  // SVG و Colors (بدون تغییر)
  const svgUrl = "/assets/icons/world-1.svg";
  const colors = ["#ff4d4d", "#ffeb3b", "#ff69b4", "#ffa500"];
  const countryNames = {
    IR: "Iran", US: "United States", CN: "China", IN: "India", RU: "Russia",
    BR: "Brazil", FR: "France", GB: "United Kingdom", DE: "Germany", JP: "Japan"
  };

  // Restricted pages - اما بدون redirect!
  const restrictedPages = [
    'inventory', 'live-stream', 'podcast', 'product-catalog', 
    'harvest-calendar', 'archive', 'catalog', 'services', 'company-profile'
  ];

  // 🚀 اصلاح شده: Session Check - همیشه true برمی‌گردونه
  async function checkUserSession(page) {
    debug(`🔍 Checking session for page: ${page}`);
    
    // Force logged in for all pages (SPA compatibility)
    const mockSession = {
      loggedIn: true,
      user: window.APP_STATE.user,
      session: { expires: "2030-01-01T00:00:00Z" }
    };
    
    // Optional: Real check (commented out to prevent redirects)
    /*
    try {
      const response = await fetch('/check_session.json', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin'
      });
      if (response.ok) {
        const data = await response.json();
        debug(`📡 Real session: ${JSON.stringify(data)}`);
        return data.loggedIn === true;
      }
    } catch (err) {
      error(`Session check failed: ${err.message}`);
    }
    */
    
    debug(`✅ Mock session: loggedIn=true for ${page}`);
    return mockSession.loggedIn; // همیشه true!
  }

  // 🚀 SPA Router - Handle direct /catalog access
  function initializeSPARouting() {
    const path = window.location.pathname.toLowerCase();
    debug(`🌐 SPA Init - Path: ${path}`);
    
    // Direct SPA routes - load without redirect
    if (restrictedPages.some(p => path.includes(p))) {
      debug(`🎯 SPA Route detected: ${path} - Bypassing login`);
      window.APP_STATE.isSPAMode = true;
      
      // Simulate window opening for catalog/services
      setTimeout(() => {
        const pageUrl = path === '/catalog' ? '/catalog/index.html' : 
                       path === '/services' ? '/services/index.html' : path + '/index.html';
        window.showWindow(pageUrl);
      }, 500);
      
      // Hide login elements
      if (loading) loading.classList.add("hidden");
      if (skeleton) skeleton.style.display = "none";
    }
  }

  // SVG Loading (بدون تغییر)
  async function loadSVG() {
    debug(`🗺️ Loading SVG from ${svgUrl}`);
    try {
      const response = await fetch(svgUrl, { mode: 'no-cors' });
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const text = await response.text();
      mapContainer.innerHTML = text;
      
      const svg = mapContainer.querySelector("svg");
      if (!svg) {
        error("No SVG element found");
        return;
      }
      
      svg.setAttribute("width", "95%");
      svg.setAttribute("height", "500px");
      svg.setAttribute("preserveAspectRatio", "xMidYMid meet");
      
      svg.querySelectorAll("rect").forEach(r => r.remove());
      const fragment = document.createDocumentFragment();
      const elements = svg.querySelectorAll("path, polygon, g");
      
      elements.forEach((el, index) => {
        el.removeAttribute("style");
        el.classList.add("country");
        const randomDelay = Math.random() * 2;
        const initialColor = colors[index % colors.length];
        el.style.setProperty("--random-delay", randomDelay);
        el.style.stroke = initialColor;
        
        const id = el.getAttribute("id") || "";
        const title = el.getAttribute("title") || id || "Country";
        const englishName = countryNames[id.toUpperCase()] || title;
        
        if (!el.querySelector("title")) {
          const titleElement = document.createDocumentNS("http://www.w3.org/2000/svg", "title");
          titleElement.textContent = title;
          el.appendChild(titleElement);
        }
        
        el.addEventListener("mousemove", e => {
          if (!el.id.toLowerCase().includes("iran")) {
            tooltip.textContent = englishName;
            tooltip.classList.add("visible");
            tooltip.style.left = `${e.clientX + 10}px`;
            tooltip.style.top = `${e.clientY + 10}px`;
          }
        });
        
        el.addEventListener("mouseleave", () => {
          tooltip.classList.remove("visible");
        });
        
        fragment.appendChild(el.cloneNode(true));
      });
      
      requestAnimationFrame(() => {
        svg.replaceChildren(fragment);
      });
    } catch (err) {
      error(`SVG load failed: ${err.message}`);
      mapContainer.textContent = `Error loading map: ${err.message}`;
    }
  }

  // 🚀 Content Loading - بدون redirect
  async function loadContent() {
    debug("🚀 Starting content load...");
    
    if (loading) loading.classList.remove("hidden");
    if (errorMessage) errorMessage.style.display = "none";
    
    // SPA Mode - skip login check
    if (window.APP_STATE.isSPAMode) {
      debug("🌐 SPA Mode - Skipping login flow");
      initializeSPARouting();
      if (loading) loading.classList.add("hidden");
      if (skeleton) skeleton.style.display = "none";
      return;
    }
    
    const criticalComponents = isMobile ? [
      { file: "/components/iphone.html", container: "icons-container" },
      { file: "/components/sidebar.html", container: "sidebar-container" }
    ] : [
      { file: "/components/header.html", container: "header-container" },
      { file: "/components/icons.html", container: "icons-container" },
      { file: "/components/dock.html", container: "dock-container" },
      { file: "/components/sidebar.html", container: "sidebar-container" },
      { file: "/components/chat-icon.html", container: "chat-icon-container" }
    ];

    let hasError = false;
    
    for (const { file, container } of criticalComponents) {
      try {
        const response = await fetch(file, { mode: 'no-cors' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const content = await response.text();
        const target = containers[container];
        if (!target) throw new Error(`Container ${container} not found`);
        
        target.innerHTML = content;
        target.style.display = "block";
        
        // Execute scripts
        const scripts = target.getElementsByTagName("script");
        for (const script of scripts) {
          const ns = document.createElement("script");
          ns.textContent = script.textContent;
          document.body.appendChild(ns);
        }
        
        debug(`✅ Loaded ${file}`);
      } catch (e) {
        error(`❌ Failed ${file}: ${e.message}`);
        hasError = true;
      }
    }

    // Mobile header hide
    if (isMobile && containers["header-container"]) {
      containers["header-container"].style.display = "none";
    }

    if (skeleton) skeleton.style.display = "none";
    if (loading) loading.classList.add("hidden");
    
    if (hasError && errorMessage) {
      errorMessage.textContent = "Some components failed to load.";
      errorMessage.style.display = "block";
    }
    
    // Desktop SVG
    if (!isMobile) {
      await loadSVG();
    }

    // URL params handling
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page');
    if (page) {
      const normalizedPage = page.replace(/[^a-zA-Z0-9-]/g, '').toLowerCase();
      debug(`📄 Page param: ${page} → ${normalizedPage}`);
      window.showWindow(`/${normalizedPage}/index.html`);
    }
  }

  // 🚀 Window Show - بدون redirect
  window.showWindow = async function(url) {
    debug(`🪟 showWindow: ${url}`);
    
    let page;
    try {
      const normalizedUrl = new URL(url, window.location.origin).pathname;
      page = normalizedUrl.replace(/^\/|\/$/g, '').split('/')[0].toLowerCase();
    } catch (err) {
      error(`URL parse error: ${err.message}`);
      page = '';
    }

    debug(`📍 Extracted page: ${page}`);

    // 🚀 Session check - همیشه pass می‌کنه
    if (restrictedPages.includes(page)) {
      const isLoggedIn = await checkUserSession(page);
      debug(`🔐 ${page} access: ${isLoggedIn ? 'GRANTED' : 'DENIED'}`);
      
      if (!isLoggedIn) {
        error(`❌ Access denied: ${page}`);
        if (errorMessage) {
          errorMessage.textContent = 'لطفاً وارد شوید';
          errorMessage.style.display = 'block';
        }
        // 🚫 NO REDIRECT - Show error instead
        return;
      }
    }

    // Close sidebar
    const tryCloseSidebar = () => {
      const sidebar = document.querySelector("#sidebar");
      if (sidebar?.classList.contains("show")) {
        sidebar.classList.remove("show");
      }
    };
    tryCloseSidebar();
    
    loadWindowContent(url);
  };

  // Window content loader
  async function loadWindowContent(url) {
    const windowContainer = containers["window-container"];
    if (!windowContainer) {
      error("Window container missing");
      return;
    }

    try {
      const response = await fetch("/components/window.html", { mode: 'no-cors' });
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      windowContainer.innerHTML = await response.text();
      windowContainer.style.display = "block";
      
      const iframe = windowContainer.querySelector("#windowIframe");
      if (iframe) {
        iframe.src = url;
        debug(`📺 Iframe src: ${url}`);
      } else {
        error("Iframe not found");
        return;
      }

      const windowOverlay = windowContainer.querySelector("#windowOverlay");
      if (windowOverlay) {
        setTimeout(() => {
          windowOverlay.classList.add("show");
          if (isMobile) {
            containers["icons-container"]?.classList.add("hidden");
          }
        }, 10);
      }

      // Execute window scripts
      const scripts = windowContainer.getElementsByTagName("script");
      for (const script of scripts) {
        const ns = document.createElement("script");
        ns.textContent = script.textContent;
        document.body.appendChild(ns);
      }
    } catch (e) {
      error(`Window load failed: ${e.message}`);
      if (errorMessage) {
        errorMessage.textContent = `خطا: ${e.message}`;
        errorMessage.style.display = "block";
      }
    }
  }

  // Hide window
  window.hideWindow = function() {
    const windowContainer = containers["window-container"];
    const windowOverlay = windowContainer?.querySelector("#windowOverlay");
    
    if (windowOverlay) {
      windowOverlay.classList.remove("show");
      setTimeout(() => {
        windowContainer.style.display = "none";
        windowContainer.innerHTML = "";
        if (isMobile) {
          containers["icons-container"]?.classList.remove("hidden");
        }
      }, 300);
    }
  };

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    debug("🎉 DOM loaded - Initializing app");
    
    const headerContainer = containers["header-container"];
    const iconsContainer = containers["icons-container"];
    const dockContainer = containers["dock-container"];

    function addClickListeners(container, selector) {
      if (container) {
        container.addEventListener("click", e => {
          const target = e.target.closest(selector);
          if (target?.dataset.url || target?.href) {
            e.preventDefault();
            const url = target.dataset.url || target.href;
            window.showWindow(url);
          }
        });
        
        container.addEventListener("keydown", e => {
          const target = e.target.closest(selector);
          if (target && (target.dataset.url || target.href) && 
              (e.key === "Enter" || e.key === " ")) {
            e.preventDefault();
            const url = target.dataset.url || target.href;
            window.showWindow(url);
          }
        });
      }
    }

    if (!isMobile) {
      addClickListeners(headerContainer, "[data-url], a[href]");
      addClickListeners(iconsContainer, "[data-url], a[href]");
      addClickListeners(dockContainer, "[data-url], a[href]");
    } else {
      addClickListeners(iconsContainer, "[data-url], a[href]");
    }

    // 🚀 Initialize SPA routing first
    initializeSPARouting();
    
    // Then load content
    loadContent();
  });

  // 🚫 Block all redirects globally
  const originalLocation = window.location;
  window.location = new Proxy(originalLocation, {
    set(target, prop, value) {
      if (prop === 'href' && value.includes('/index.html') && window.APP_STATE.isLoggedIn) {
        debug(`🚫 Blocked redirect to ${value} - SPA mode active`);
        return true;
      }
      return Reflect.set(target, prop, value);
    }
  });

  // Prevent history manipulation that causes redirects
  const originalPushState = history.pushState;
  history.pushState = function(state, title, url) {
    if (url && url.includes('/index.html') && window.APP_STATE.isLoggedIn) {
      debug(`🚫 Blocked history.pushState to ${url}`);
      return;
    }
    return originalPushState.apply(history, arguments);
  };

})();
