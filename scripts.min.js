(async () => {
  const debug = m => console.log(`[DEBUG] Index: ${m}`);
  const error = m => console.error(`[ERROR] Index: ${m}`);
  const loading = document.getElementById("loading");
  const errorMessage = document.getElementById("error-message");
  const mapContainer = document.getElementById("map-container");
  const tooltip = document.getElementById("tooltip");
  const skeleton = document.getElementById("skeleton");
  const containers = {
    "header-container": document.getElementById("header-container"),
    "icons-container": document.getElementById("icons-container"),
    "dock-container": document.getElementById("dock-container"),
    "sidebar-container": document.getElementById("sidebar-container"),
    "chat-icon-container": document.getElementById("chat-icon-container"),
    "control-center-container": document.getElementById("control-center-container"),
    "window-container": document.getElementById("window-container"),
    "map-container": mapContainer
  };

  for (const [id, container] of Object.entries(containers)) {
    container ? debug(`${id} found`) : error(`${id} not found in DOM`);
  }

  const isMobile = window.matchMedia("(max-width: 768px)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  debug(`Is mobile: ${isMobile}`);

  const svgUrl = "/assets/icons/world-1.svg";
  const colors = ["#ff4d4d", "#ffeb3b", "#ff69b4", "#ffa500"];
  const countryNames = {
    IR: "Iran",
    US: "United States",
    CN: "China",
    IN: "India",
    RU: "Russia",
    BR: "Brazil",
    FR: "France",
    GB: "United Kingdom",
    DE: "Germany",
    JP: "Japan"
  };

  const restrictedPages = [
    'inventory',
    'live-stream',
    'podcast',
    'product-catalog',
    'harvest-calendar',
    'archive'
  ];

  async function checkUserSession(page) {
    debug(`Checking session for page: ${page}`);
    try {
      const response = await fetch('/check_session.php', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin'
      });
      if (!response.ok) {
        error(`Session check failed with status: ${response.status}`);
        return false;
      }
      const data = await response.json();
      debug(`Session check response: ${JSON.stringify(data)}`);
      return data.loggedIn === true;
    } catch (err) {
      error(`Session check failed: ${err.message}`);
      return false;
    }
  }

  async function loadSVG() {
    debug(`Attempting to load SVG from ${svgUrl}`);
    try {
      const response = await fetch(svgUrl, { mode: 'no-cors' });
      if (!response.ok) throw new Error(`Failed to fetch map: HTTP ${response.status}`);
      const text = await response.text();
      mapContainer.innerHTML = text;
      const svg = mapContainer.querySelector("svg");
      if (!svg) {
        error("No SVG element found in fetched content");
        mapContainer.textContent = "Error loading map: Invalid SVG";
        return;
      }
      debug("SVG element found");
      svg.setAttribute("width", "95%");
      svg.setAttribute("height", "500px"); // اصلاح مقدار height
      svg.setAttribute("preserveAspectRatio", "xMidYMid meet");
      svg.querySelectorAll("rect").forEach(r => r.remove());
      const fragment = document.createDocumentFragment();
      const elements = svg.querySelectorAll("path, polygon, g");
      debug(`Found ${elements.length} SVG elements`);
      elements.forEach((el, index) => {
        el.removeAttribute("style");
        el.classList.add("country");
        const randomDelay = Math.random() * 2;
        const initialColor = colors[index % colors.length];
        el.style.setProperty("--random-delay", randomDelay);
        el.style.stroke = initialColor;
        const id = el.getAttribute("id") || "";
        const title = el.getAttribute("title") || id || "Country";
        const englishName = countryNames[id.toUpperCase()] || title;
        if (!el.querySelector("title")) {
          const titleElement = document.createElementNS("http://www.w3.org/2000/svg", "title");
          titleElement.textContent = title;
          el.appendChild(titleElement);
        }
        el.addEventListener("mousemove", e => {
          if (el.id !== "IR" && !el.getAttribute("title")?.toLowerCase().includes("iran") && !el.id.toLowerCase().includes("iran")) {
            tooltip.textContent = englishName;
            tooltip.classList.add("visible");
            const x = e.clientX + 10, y = e.clientY + 10;
            tooltip.style.left = `${x}px`;
            tooltip.style.top = `${y}px`;
            debug(`Tooltip shown for ${englishName}`);
          }
        });
        el.addEventListener("mouseleave", () => {
          tooltip.classList.remove("visible");
          debug("Tooltip hidden");
        });
        fragment.appendChild(el.cloneNode(true));
      });
      requestAnimationFrame(() => {
        svg.replaceChildren(fragment);
        debug("SVG elements replaced, animations should be active");
      });
    } catch (err) {
      error(`Failed to load SVG: ${err.message}`);
      mapContainer.textContent = `Error loading map: ${err.message}`;
    }
  }

  async function loadContent() {
    loading.classList.remove("hidden");
    errorMessage.style.display = "none";
    
    const criticalComponents = isMobile ? [
      { file: "/components/iphone.html", container: "icons-container" },
      { file: "/components/sidebar.html", container: "sidebar-container" }
    ] : [
      { file: "/components/header.html", container: "header-container" },
      { file: "/components/icons.html", container: "icons-container" },
      { file: "/components/dock.html", container: "dock-container" },
      { file: "/components/sidebar.html", container: "sidebar-container" },
      { file: "/components/chat-icon.html", container: "chat-icon-container" }
    ];

    let hasError = false;
    
    for (const { file, container } of criticalComponents) {
      try {
        debug(`Loading ${file} into ${container}`);
        const response = await fetch(file, { mode: 'no-cors' });
        if (!response.ok) throw new Error(`HTTP ${response.status} for ${file}`);
        const content = await response.text();
        const target = containers[container];
        if (!target) throw new Error(`Container ${container} not found`);
        target.innerHTML = content;
        debug(`Loaded ${file} into ${container}`);
        target.style.display = "block";
        const scripts = target.getElementsByTagName("script");
        for (const script of scripts) {
          const ns = document.createElement("script");
          ns.textContent = script.textContent;
          document.body.appendChild(ns);
          debug(`Executed script in ${file}`);
        }
      } catch (e) {
        error(`Failed to load ${file}: ${e.message}`);
        hasError = true;
      }
    }

    if (isMobile && containers["header-container"]) {
      containers["header-container"].style.display = "none";
      containers["header-container"].classList.add("hidden");
      debug("Header container hidden on mobile");
    }

    skeleton.style.display = "none";
    loading.classList.add("hidden");
    
    if (hasError) {
      errorMessage.textContent = "Unable to load some components. Please try again.";
      errorMessage.style.display = "block";
    }
    
    if (!isMobile) {
      debug("Loading SVG for desktop");
      await loadSVG();
    }

    // چک کردن پارامتر URL برای لود خودکار صفحه فرعی
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page');
    if (page) {
      const normalizedPage = page.replace(/[^a-zA-Z0-9-]/g, '').toLowerCase();
      const pageUrl = `/${normalizedPage}/index.html`;
      debug(`Found page parameter: ${page}, loading ${pageUrl}`);
      window.showWindow(pageUrl);
    }
  }

  window.showWindow = async function(url) {
    debug(`Showing window with URL: ${url}`);
    let page;
    try {
      const normalizedUrl = new URL(url, window.location.origin).pathname;
      page = normalizedUrl.replace(/^\/|\/$/g, '').split('/')[0].toLowerCase();
      debug(`Extracted page: ${page}`);
    } catch (err) {
      error(`Invalid URL format: ${url}, error: ${err.message}`);
      page = '';
    }

    if (restrictedPages.includes(page)) {
      const isLoggedIn = await checkUserSession(page);
      if (!isLoggedIn) {
        error(`Access denied to restricted page: ${page}`);
        errorMessage.textContent = 'لطفاً برای دسترسی به این بخش وارد شوید';
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
          window.location.href = '/index.html';
        }, 1500);
        return;
      }
    }

    const tryCloseSidebar = () => {
      const sidebar = document.querySelector("#sidebar");
      if (sidebar) {
        if (sidebar.classList.contains("show")) {
          sidebar.classList.remove("show");
          debug("Sidebar closed automatically when opening window");
        } else {
          debug("Sidebar already closed or not visible");
        }
      } else {
        error("Sidebar element not found when trying to close");
        setTimeout(tryCloseSidebar, 100);
      }
    };
    tryCloseSidebar();
    loadWindowContent(url);
  };

  async function loadWindowContent(url) {
    const windowContainer = containers["window-container"];
    if (!windowContainer) {
      error("Window container not found in DOM");
      errorMessage.textContent = "خطا: کانتینر پنجره یافت نشد";
      errorMessage.style.display = "block";
      return;
    }
    try {
      debug("Loading /components/window.html");
      const response = await fetch("/components/window.html", { mode: 'no-cors' });
      if (!response.ok) throw new Error(`HTTP ${response.status} for window.html`);
      const content = await response.text();
      windowContainer.innerHTML = content;
      debug("Loaded window.html into window-container");
      windowContainer.style.display = "block";
      const iframe = windowContainer.querySelector("#windowIframe");
      if (iframe) {
        iframe.src = url;
        debug(`Set iframe src to ${url}`);
      } else {
        error("Iframe not found in window.html");
        errorMessage.textContent = "خطا: iframe یافت نشد";
        errorMessage.style.display = "block";
        return;
      }
      const windowOverlay = windowContainer.querySelector("#windowOverlay");
      if (windowOverlay) {
        setTimeout(() => {
          windowOverlay.classList.add("show");
          if (isMobile) {
            containers["icons-container"].classList.add("hidden");
            debug("Icons container hidden on mobile");
          }
          debug("Window overlay shown");
        }, 10);
      } else {
        error("Window overlay not found");
        errorMessage.textContent = "خطا: overlay پنجره یافت نشد";
        errorMessage.style.display = "block";
        return;
      }
      const scripts = windowContainer.getElementsByTagName("script");
      for (const script of scripts) {
        const newScript = document.createElement("script");
        newScript.textContent = script.textContent;
        document.body.appendChild(newScript);
        debug("Executed script in window.html");
      }
    } catch (e) {
      error(`Failed to load window.html: ${e.message}`);
      errorMessage.textContent = `خطا در بارگذاری پنجره: ${e.message}`;
      errorMessage.style.display = "block";
    }
  }

  window.hideWindow = function() {
    const windowContainer = containers["window-container"];
    const windowOverlay = windowContainer?.querySelector("#windowOverlay");
    if (windowOverlay) {
      debug("Hiding window overlay");
      windowOverlay.classList.remove("show");
      setTimeout(() => {
        windowContainer.style.display = "none";
        windowContainer.innerHTML = "";
        if (isMobile) {
          containers["icons-container"].classList.remove("hidden");
          debug("Icons container shown on mobile");
        }
        debug("Window hidden and cleared");
      }, 300);
    } else {
      debug("No window overlay to hide");
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    const headerContainer = containers["header-container"];
    const iconsContainer = containers["icons-container"];
    const dockContainer = containers["dock-container"];

    function addClickListeners(container, selector) {
      if (container) {
        container.addEventListener("click", e => {
          const target = e.target.closest(selector);
          if (target && (target.dataset.url || target.href)) {
            e.preventDefault();
            const url = target.dataset.url || target.href;
            window.showWindow(url);
            debug(`Clicked element with URL: ${url}`);
          }
        });
        container.addEventListener("keydown", e => {
          const target = e.target.closest(selector);
          if (target && (target.dataset.url || target.href) && (e.key === "Enter" || e.key === " ")) {
            e.preventDefault();
            const url = target.dataset.url || target.href;
            window.showWindow(url);
            debug(`Keyboard activated element with URL: ${url}`);
          }
        });
      }
    }

    if (!isMobile) {
      addClickListeners(headerContainer, "[data-url], a[href]");
      addClickListeners(iconsContainer, "[data-url], a[href]");
      addClickListeners(dockContainer, "[data-url], a[href]");
      debug("Event listeners added for desktop containers");
    } else {
      addClickListeners(iconsContainer, "[data-url], a[href]");
      debug("Event listeners added only for mobile icons container");
    }

    loadContent();
  });
})();
